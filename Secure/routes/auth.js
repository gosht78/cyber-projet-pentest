var express = require("express");
var router = express.Router();
var path = require("path");
var db = require("../dbconnector");
var bcrypt = require("bcrypt");
var middleware = require("../middleware/auth");
var session = require("express-session");

var saltRounds = 10;







//Get the login page
router.get("/signup", (req, res) => {
  console.log("signin");
  res.sendFile(path.join(__dirname, "../views", "inscription.html"));
});



//Register a new user
router.post("/signup", (req, res) => {
  //TODO: Implement user registration
  // Extract user data from request body

  var { username, name, password } = req.body;
  console.log(username);

  // Check if username and password are provided
  if (!username || !password || !name) {
    return res
      .status(400)
      .json({ error: "Username and password are required" });
  }

  // Check if user already exists in the database
  


  // Hash the password
  password = bcrypt.hashSync(password, saltRounds);

  // Add the new user to the database
  var sql = "INSERT INTO users (username, password, name) VALUES (?, ?, ?)";

  // Execute the SQL query
  db.query(sql, [username, password, name], (err, result) => {

    // Check for errors
    if (err) {
      console.log("Error registering user");
      // Return an error response
      return res.status(500).json({ error: "Error registering user" });
    }

    //console.log("User registered successfully");
  });

  // Redirect or send response indicating successful registration
  res.redirect("/auth/login");
});



//Get the login page
router.get("/login", (req, res) => {
  console.log("signup");
  res.render("connexion",{redirectUrl:
        req.query.REDIRECT_URL, error: null});
});


//Authenticate the user
router.post("/login", (req, res) => {
  var { username, password } = req.body;
  console.log(req.body);
  console.log(username);
  console.log(password);
  console.log(req.query)
  const redirect = req.query.REDIRECT_URL || "/home";
        console.log(redirect);
  // Check if username and password are provided
  if (!username || !password) {
    return res
      .status(400)
      .json({ error: "Username and password are required" });
  }

  // Check if user exists in the database
  result = null;
  var sql = "SELECT * FROM users WHERE username = ?";
  db.query(sql, [username], (err, result) => {
    if (err) {
      console.log("Error retrieving user");
      return res.status(500).json({ error: "Error retrieving user" });
    }
    if (result.length === 0) {
      return res.status(401).json({ error: "Invalid username" });
    }

    // Check if the password is correct
    password = bcrypt.compareSync(password, result[0].password);
    console.log(password);
    if (!password) {
      return res.status(401).json({ error: "Invalid username or password" });
    }

    // Generate an access token
    var user = {
      username: result[0].username,
      name: result[0].name,
    };

    token = middleware.generateAccessToken(user);
    console.log("Access token generated successfully");
    console.log(token);
    res.cookie("token", token, { httpOnly: true });
    res.redirect(redirect);

  });

});


//Logout the user
router.get("/logout", (req, res) => {
  res.clearCookie("token");
  res.redirect("/home");
});


//Export the router
module.exports = router;

var express = require('express');
var router = express.Router();
var middleware = require('../middleware/auth');
var db = require('../dbconnector');
var jwt = require('jsonwebtoken');
var dotenv = require('dotenv');
require('dotenv').config();
var methodOverride = require('method-override');// npm install method-override



const { decode } = require('jsonwebtoken');
const upload = require('../middleware/upload');
const multer = require('multer');



router.use(middleware.authenticateToken);

router.post('/create', upload.single('file'), async (req, res) => {
        console.log('create task');
        var { title, description, dueDate } = req.body;
        console.log(req.body);
        console.log(title);
        console.log(description);
        console.log(dueDate);

        const userId = await middleware.getUserIdFromToken(req.cookies.token);
        console.log("Test " + userId);
        console.log("Bonjour");
        console.log(req.file);
        console.log(req.file.filename);
        


        var sql = 'INSERT INTO tasks (creatorId ,title, description, dueDate, fileName) VALUES (?, ?, ?, ?, ?)';
        db.query(sql, [userId, title, description, dueDate, req.file.filename], (err, result) => {
                if (err) {
                        console.log('Error creating task');
                        console.log(err);
                        return res.status(500).json({ error: 'Error creating task' });
                }
                console.log('Task created successfully');
                res.redirect('/task/list');
        });
});

router.get('/list', middleware.authenticateToken, (req, res) => {
        console.log('list tasks');

        token = req.cookies.token;
        console.log(token);
        decoded = jwt.verify(token,process.env.ACCESS_TOKEN_SECRET);
        console.log(decoded);
        username = decoded.username;
        console.log(username);

        var sql = 'SELECT tasks.* FROM tasks INNER JOIN users ON tasks.creatorID = users.id WHERE users.username = ?';

        db.query(sql,[username] ,(err, result) => {
                
                if (err) {
                        console.log('Error listing tasks');
                        console.log(err);
                        return res.status(500).json({ error: 'Error listing tasks' });
                }
                console.log('Tasks listed successfully');
                console.log(result);
                res.render('tasks', { tasks: result });
        });
});


router.use(methodOverride('_method'));

router.put('/:id', middleware.authenticateToken, (req, res) => {
        console.log('update task ');
        var { id } = req.params;
        //var { title, description, dueDate, status } = req.body;
        console.log(id);

        var sql = 'UPDATE tasks SET status = ? WHERE id = ?';
        db.query(sql, [1, id], (err, result) => {
                if (err) {
                        console.log('Error updating task');
                        console.log(err);
                        return res.status(500).json({ error: 'Error updating task' });
                }
                console.log('Task updated successfully');
                res.redirect('/task/list');
        });
});


router.delete('/:id', middleware.authenticateToken, (req, res) => {
        console.log('delete task');
        var { id } = req.params;
        console.log(id);
        var sql = 'DELETE FROM tasks WHERE id = ?';
        db.query(sql, [id], (err, result) => {
                if (err) {
                        console.log('Error deleting task');
                        console.log(err);
                        return res.status(500).json({ error: 'Error deleting task' });
                }
                console.log('Task deleted successfully');
                res.redirect('/task/list');
        });

        
});

router.put('/edit/:id', middleware.authenticateToken, (req, res) => {
        console.log('edit task');
        var { id } = req.params;
        console.log(id);
        console.log(req);
        var sql = 'UPDATE tasks SET title = ?, description = ?, dueDate = ? WHERE id = ?';
        db.query(sql, [req.body.editTitle, req.body.editDescription, req.body.editDueDate, id], (err, result) => {
                if (err) {
                        console.log('Error editing task');
                        console.log(err);
                        return res.status(500).json({ error: 'Error editing task' });
                }
                console.log('Task edited successfully');
                res.redirect('/task/list');
        });
});

module.exports = router;
var express = require('express');
var jwt = require('jsonwebtoken');
var dotenv = require('dotenv');
var db = require('../dbconnector');


//Take the secrets from the .env file
require('dotenv').config();
process.env.ACCESS_TOKEN_SECRET;
process.env.REFRESH_TOKEN_SECRET;



function getUsernameFromToken(token){
        console.log('getUsernameFromToken');
        console.log(token);
        var decoded = jwt.verify(token,process.env.ACCESS_TOKEN_SECRET);
        console.log(decoded);
        var username = decoded.username;
        console.log(username);
        return username;
}

        function getUserIdFromToken(token){
        return new Promise((resolve, reject) => {
        var username =  getUsernameFromToken(token);
        var sql = 'SELECT id FROM users WHERE username = ?';
        db.query(sql,[username], (err, result) => {
                if (err) {
                        console.log('Error getting user id');
                        return reject(err);
                }
                console.log('User id retrieved successfully');
                console.log(result[0].id);
                return resolve(result[0].id);
        }
        );
        console.log('User id not found');
});
}


function generateAccessToken(user) {
        console.log('generateAccessToken');
        console.log(user);
        console.log(process.env.ACCESS_TOKEN_SECRET);
        token = jwt.sign(user, process.env.ACCESS_TOKEN_SECRET,{ expiresIn: '5s'});
        console.log(token);

        return token;

}

function authenticateToken(req, res, next) {
        console.log('authenticateToken');
        console.log(req.cookies);
        const token = req.cookies.token;
        
        console.log(token);
        if (token == null) return res.redirect('/auth/login');
        jwt.verify(token, process.env.ACCESS_TOKEN_SECRET, (err, user) => {
                console.log('Verifing Token');
                console.log(err);
                if(err instanceof jwt.TokenExpiredError){
                        console.log('Token expired');
                        return res.redirect('/auth/login?REDIRECT_URL='+req.originalUrl);
                }
                if (err) {
                        console.log('Error verifying token');
                        return res.sendStatus(403);
                }
                
                req.user = user;
                next();
        });
}

module.exports = { generateAccessToken , authenticateToken, getUsernameFromToken, getUserIdFromToken};
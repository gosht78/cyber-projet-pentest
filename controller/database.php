<?php

class Database{

    private static $dns;
    private static $user;
    private static $password;
    private static $database;

    public function __construct()
    {
        self::$dns = "mysql:host=localhost;dbname=BudgetWisebdd2;port=3306"; // À changer selon vos configurations
        self::$user = "root"; // À changer selon vos configurations
        self::$password = ""; // À changer selon vos configurations
        try {
            self::$database = new PDO(self::$dns, self::$user, self::$password);
            self::$database->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
        } catch(PDOException $e) {
            echo "Erreur de connexion à la base de données: " . $e->getMessage();
            die();
        }
    }




    public static function getInstance() {
        if (!self::$database) {
            self::$dns = "mysql:host=localhost;dbname=BudgetWisebdd2;port=3306"; // À changer selon vos configurations
            self::$user = "root"; // À changer selon vos configurations
            self::$password = ""; // À changer selon vos configurations
            try {
                self::$database = new PDO(self::$dns, self::$user, self::$password);
                self::$database->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
            } catch(PDOException $e) {
                echo "Erreur de connexion à la base de données: " . $e->getMessage();
                die();
            }
        }
        return self::$database;
    }




    public function AddUser($nomU, $prenomU, $naissanceU, $villeU,$roleU,$emailU, $mdpU,$imageU,$code_confirmation)
    {


        try {
            $sql = "INSERT INTO `utilisateur` (`nom`, `prenom`, `datedenaissance`, `ville`, `roll`,`adressemail`, `mdp`,`image`, `code_confirmation`)
            VALUES (:nomU, :prenomU, :naissanceU, :villeU, :roleU, :emailU, :mdpU,:imageU, :code_confirmation)";
    $statement = self::$database->prepare($sql);
    $statement->bindParam(':nomU', $nomU);
    $statement->bindParam(':prenomU', $prenomU);
    $statement->bindParam(':naissanceU', $naissanceU);
    $statement->bindParam(':villeU', $villeU);
    $statement->bindParam(':roleU', $roleU);
    $statement->bindParam(':emailU', $emailU);
    $statement->bindParam(':mdpU', $mdpU);
    $statement->bindParam(':imageU', $imageU);
    $statement->bindParam(':code_confirmation', $code_confirmation);
            $statement->execute();
            echo "Welcome";
        } catch(PDOException $e) {
            echo "Erreur lors de l'ajout de l'utilisateur: " . $e->getMessage();
            die();
        }
    }
    
    



    public function Login($email, $password)
{
    try {
        $sql = "SELECT * FROM `utilisateur` WHERE `adressemail` = :email";
        $statement = self::$database->prepare($sql);
        $statement->bindParam(':email', $email);
        $statement->execute();
        $user = $statement->fetch(PDO::FETCH_ASSOC);
        return $user;
    } catch(PDOException $e) {
        echo "Erreur lors de la connexion: " . $e->getMessage();
        die();
    }
}




public function GetUserByEmailAndCode($email, $code) {
    $database = self::getInstance();
    $query = "SELECT * FROM utilisateur WHERE adressemail=:email AND code_confirmation=:code AND confirmer=0";
    $statement = $database->prepare($query);
    $statement->bindParam(":email", $email);
    $statement->bindParam(":code", $code);
    $statement->execute();
    return $statement->fetch();
}



public function GetUserByCode($code) {
    $database = self::getInstance();
    $query = "SELECT * FROM utilisateur WHERE code_confirmation=:code";
    $statement = $database->prepare($query);
    $statement->bindParam(":code", $code);
    $statement->execute();
    return $statement->fetch();
}




public function confirmUser($email) {
    $database = self::getInstance();
    $query = "UPDATE utilisateur SET confirmer = 1 WHERE adressemail = :email";
    $statement = $database->prepare($query);
    $statement->bindParam(":email", $email, PDO::PARAM_INT);
    
    try {
        $statement->execute();
        $affectedRows = $statement->rowCount();
        
        if ($affectedRows == 0) {
            throw new Exception("Invalid email  provided.");
        }
        
        return true;
    } catch (PDOException $e) {
        // Handle database errors
        error_log("Database error: " . $e->getMessage());
        return false;
    } catch (Exception $e) {
        // Handle other errors
        error_log("Error: " . $e->getMessage());
        return false;
    }
}




public function GetUserById($user_id) {
    $database = self::getInstance();
    $query = "SELECT * FROM utilisateur WHERE id_user = ?";
    $statement = $database->prepare($query);
    $statement->bindParam(1, $user_id, PDO::PARAM_INT);
    $statement->execute();
    $user = $statement->fetch(PDO::FETCH_ASSOC);
    return $user;
}

public function GetUserByEmail($email) {
    $database = self::getInstance();
    $query = "SELECT * FROM utilisateur WHERE adressemail = ?";
    $statement = $database->prepare($query);
    $statement->bindParam(1, $email, PDO::PARAM_INT);
    $statement->execute();
    $user = $statement->fetch(PDO::FETCH_ASSOC);
    return $user;
}


public function deleteUserById($user_id) {
    $database = self::getInstance();
    $query = "DELETE FROM utilisateur WHERE id_user=?";
    $statement = $database->prepare($query);
    $statement->bindParam(1, $user_id, PDO::PARAM_INT);
    $statement->execute();
    return $statement->fetch(PDO::FETCH_ASSOC);
}
public function AddConfirmationCode($email, $confirmation_code){
    $database = self::getInstance();
    $query = "UPDATE utilisateur SET code_confirmation=? WHERE adressemail=?";
    $statement = $database->prepare($query);
    $statement->execute([$confirmation_code, $email]);
    return $statement->rowCount() > 0;
}

public function VerifyConfirmationCode($email, $code){
    $database = self::getInstance();
    $query = "SELECT * FROM utilisateur WHERE adressemail=? AND code_confirmation=?";
    $statement = $database->prepare($query);
    $statement->execute([$email, $code]);
    return $statement->rowCount() > 0;
}

public function updateVericiationCodeByEmail($email,$verification_code){
    $database = self::getInstance();
    $query = "UPDATE utilisateur SET code_confirmation=? WHERE adressemail=?";
    $statement = $database->prepare($query);
    $statement->execute([$verification_code, $email]);
    return $statement->rowCount() > 0;
}
public function updateUserById($user_id, $nomU, $prenomU, $naissanceU, $villeU,$mdpU ) {
    $database = self::getInstance();
    $query = "UPDATE utilisateur SET nom=?, prenom=?, datedenaissance=?, ville=?,  mdp=?, WHERE id_user=?";
    $statement = $database->prepare($query);
    $statement->execute([$nomU, $prenomU, $naissanceU, $villeU, $mdpU, $user_id]);
    return $statement->rowCount() > 0;
}
public function UpdatePassword($email, $mdpU){
    $database = self::getInstance();
    $query = "UPDATE utilisateur SET mdp=? WHERE adressemail=?";
    $statement = $database->prepare($query);
    $statement->execute([$mdpU, $email]);
    return $statement->rowCount() > 0;
}

public function updateMdpByEmail($email,$mdpU) {
    $database = self::getInstance();
    $query = "UPDATE utilisateur SET  mdp=?WHERE adressemail=?";
    $statement = $database->prepare($query);
    $statement->execute([ $mdpU, $email]);
    return $statement->rowCount() > 0;
}
public function updateUserByIdUser($user_id, $nomU, $prenomU, $naissanceU, $villeU, $mdpUSer, $emailUser ,$imageUser) {
    $database = self::getInstance();
    $query = "UPDATE utilisateur SET nom=?, prenom=?, datedenaissance=?, ville=?, mdp=?, adressemail=?, image=? WHERE id_user=?";
    $statement = $database->prepare($query);
    $statement->execute([$nomU, $prenomU, $naissanceU, $villeU, $mdpUSer, $emailUser , $imageUser,$user_id]);
    return $statement->rowCount() > 0;
    
}
public function getAllEmails()
{
    $database = self::getInstance();
    $query = "SELECT adressemail FROM utilisateur";
    $statement = $database->prepare($query);
    $statement->execute();
    $emails = $statement->fetchAll(PDO::FETCH_COLUMN);
    return $emails;
}
public function getache($id_user){
    $database = self::getInstance();
    $query = "SELECT tache FROM Tache<
     WHERE id_user = ? AND id_type=7";
    $statement = $database->prepare($query);
    $statement->execute([$id_user]);
    $soldeType = $statement->fetch(PDO::FETCH_ASSOC);
    return $soldeType;
}
public function getsoldetotal($id_user){
    $database = self::getInstance();
    $query = "SELECT solde FROM compte WHERE id_user = ? AND id_type=8";
    $statement = $database->prepare($query);
    $statement->execute([$id_user]);
    $soldeType = $statement->fetch(PDO::FETCH_ASSOC);
    return $soldeType;
}
public function getDepensesByType($id_user, $typeDepense) {
        $database = self::getInstance();
        $query = "SELECT * FROM depence WHERE id_user = ? AND id_type = ?";
        $statement = $database->prepare($query);
        $statement->execute([$id_user, $typeDepense]);
        return $statement->fetchAll(PDO::FETCH_ASSOC);
    }

   
}